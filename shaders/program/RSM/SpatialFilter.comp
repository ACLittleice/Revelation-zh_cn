/*
--------------------------------------------------------------------------------

	Revelation Shaders

	Copyright (C) 2024 HaringPro
	Apache License 2.0

    Pass: Spatial filter for indirect lighting

--------------------------------------------------------------------------------
*/

layout (local_size_x = 16, local_size_y = 16) in;
const vec2 workGroupsRender = vec2(0.5f, 0.5f);

//======// Utility //=============================================================================//

#include "/lib/Utility.glsl"

//======// Image //===============================================================================//

writeonly restrict uniform image2D colorimg3;

//======// Uniform //=============================================================================//

uniform sampler2D depthtex0;

uniform sampler2D colortex13; // Previous indirect light

uniform mat4 gbufferModelViewInverse;
uniform mat4 gbufferProjectionInverse;

uniform vec2 viewPixelSize;
uniform vec2 viewSize;
uniform vec2 halfViewSize;
uniform vec2 halfViewEnd;

uniform int frameCounter;

//======// Function //============================================================================//

#include "/lib/universal/Offset.glsl"

const uint padRadius = 2;
const uvec2 sharedSize = gl_WorkGroupSize.xy + (padRadius << 1);

shared uvec4 sharedData[sharedSize.y][sharedSize.x];

uvec4 PackupSharedData(in ivec2 texel, in ivec2 offset) {
    vec3 sharedIrradiance = texelFetch(colortex13, texel, 0).rgb;
    vec4 sharedNormalDepth = texelFetch(colortex13, texel + offset, 0);

    return uvec4(
        packUnorm2x16(sharedIrradiance.xy),
        packSnorm2x16(sharedNormalDepth.xy),
        packSnorm2x16(vec2(sharedIrradiance.z, sharedNormalDepth.z)),
        floatBitsToUint(sharedNormalDepth.w)
    );
}

void UnpackSharedData(in uvec2 texel, out vec3 sharedIrradiance, out vec4 sharedNormalDepth) {
    uvec4 sharedData = sharedData[texel.y][texel.x];
    vec2 unpackedZ = unpackSnorm2x16(sharedData.z);

    sharedIrradiance.xy  = unpackUnorm2x16(sharedData.x);
    sharedNormalDepth.xy = unpackSnorm2x16(sharedData.y);
    sharedIrradiance.z = unpackedZ.x;
    sharedNormalDepth.z = unpackedZ.y;
    sharedNormalDepth.w  = uintBitsToFloat(sharedData.w);
}

void SharedPreload() {
    ivec2 groupBase = ivec2(gl_WorkGroupID.xy * gl_WorkGroupSize.xy - padRadius);
	ivec2 offsetToBR = ivec2(halfViewSize.x, 0);
    ivec2 texelEnd = ivec2(halfViewEnd);

    const uint sharedArea = sharedSize.x * sharedSize.y;
    const uint groupArea = gl_WorkGroupSize.x * gl_WorkGroupSize.y;
    const uint stageNum = (sharedArea - 1) / groupArea + 1;

    uint localIndex = gl_LocalInvocationIndex;
    ivec2 localID = ivec2(localIndex % sharedSize.x, localIndex / sharedSize.x);

    ivec2 loadTexel = groupBase + localID;
    loadTexel = clamp(loadTexel, ivec2(0), texelEnd);

    sharedData[localID.y][localID.x] = PackupSharedData(loadTexel, offsetToBR);

    for (uint stage = 1u; stage < stageNum; ++stage) {
        localIndex = gl_LocalInvocationIndex + stage * groupArea;

        if (localIndex < sharedArea) {
            localID = ivec2(localIndex % sharedSize.x, localIndex / sharedSize.x);

            loadTexel = groupBase + localID;
            loadTexel = clamp(loadTexel, ivec2(0), texelEnd);

            sharedData[localID.y][localID.x] = PackupSharedData(loadTexel, offsetToBR);
        }
    }

    memoryBarrierShared();
    barrier();
}

vec3 ScreenToViewVectorRaw(in vec2 screenCoord) {
	vec2 NDCCoord = screenCoord * 2.0 - 1.0;
	return normalize(vec3(diagonal2(gbufferProjectionInverse) * NDCCoord, gbufferProjectionInverse[3].z));
}

uint triple32(uint x) {
    // https://nullprogram.com/blog/2018/07/31/
    x ^= x >> 17;
    x *= 0xed5ad4bbu;
    x ^= x >> 11;
    x *= 0xac4c1b51u;
    x ^= x >> 15;
    x *= 0x31848babu;
    x ^= x >> 14;
    return x;
}

uint randState = triple32(uint(gl_GlobalInvocationID.x + viewSize.x * gl_GlobalInvocationID.y) + uint(viewSize.x * viewSize.y) * frameCounter);
uint RandNext() { return randState = triple32(randState); }
#define RandNext2F() (vec2(RandNext()) / float(0xffffffffu))

//======// Main //================================================================================//
void main() {
    SharedPreload();

    uvec2 sharedTexel = gl_LocalInvocationID.xy + padRadius;

    vec3 indirectData;
    vec4 normalDepthData;
    UnpackSharedData(sharedTexel, indirectData, normalDepthData);

    vec2 screenCoord = texelToUv(gl_GlobalInvocationID.xy);
    vec3 viewDir = ScreenToViewVectorRaw(screenCoord * 2.0);
    vec3 worldDir = mat3(gbufferModelViewInverse) * viewDir;
    float sigmaZ = -4.0 * rLOG2 * abs(dot(normalDepthData.xyz, worldDir));

    float sumWeight = 1.0;
    sharedTexel += ivec2(2.0 * RandNext2F() - 1.0);

    for (uint i = 0u; i < 16u; ++i) {
        uvec2 sampleSharedTexel = sharedTexel + offset4x4[i];

        vec3 sampleIrradiance;
        vec4 sampleNormalDepth;
        UnpackSharedData(sampleSharedTexel, sampleIrradiance, sampleNormalDepth);

        float weight = exp2(-0.1 * dotSelf(offset4x4[i]));
        weight *= exp2(abs(sampleNormalDepth.w - normalDepthData.w) * sigmaZ); // Distance weight
        weight *= pow32(saturate(dot(sampleNormalDepth.xyz, normalDepthData.xyz))); // Normal weight

        indirectData += sampleIrradiance * weight;
        sumWeight += weight;
    }

    indirectData *= rcp(sumWeight);
    imageStore(colorimg3, ivec2(gl_GlobalInvocationID.xy), vec4(indirectData, 1.0));
}
