/*
--------------------------------------------------------------------------------

	Revelation Shaders

	Copyright (C) 2024 HaringPro
	Apache License 2.0

    Pass: Edge-Avoiding À-Trous Wavelet Filter for indirect diffuse irradiance
	Reference:  https://research.nvidia.com/sites/default/files/pubs/2017-07_Spatiotemporal-Variance-Guided-Filtering://svgf_preprint.pdf
                https://cescg.org/wp-content/uploads/2018/04/Dundr-Progressive-Spatiotemporal-Variance-Guided-Filtering-2.pdf

--------------------------------------------------------------------------------
*/

// #extension GL_NV_compute_shader_derivatives : enable

layout (local_size_x = 16, local_size_y = 16) in;
const vec2 workGroupsRender = vec2(0.5f, 0.5f);

//======// Utility //=============================================================================//

#include "/lib/Utility.glsl"

//======// Image //===============================================================================//

layout (rgba16f) restrict uniform image2D colorimg3;

//======// Uniform //=============================================================================//

#include "/lib/universal/Uniform.glsl"

//======// Function //============================================================================//

#include "/lib/universal/Random.glsl"

const uint padRadius = 1;
const uvec2 sharedSize = gl_WorkGroupSize.xy + (padRadius << 1);

shared float sharedVariance[sharedSize.x][sharedSize.y];

void SharedPreload() {
    ivec2 groupBase = ivec2(gl_WorkGroupID.xy * gl_WorkGroupSize.xy - padRadius);

    const uint sharedArea = sharedSize.x * sharedSize.y;
    const uint groupArea = gl_WorkGroupSize.x * gl_WorkGroupSize.y;
    const uint stageNum = (sharedArea - 1) / groupArea + 1;

    uint localIndex = gl_LocalInvocationIndex;
    ivec2 localID = ivec2(localIndex % sharedSize.x, localIndex / sharedSize.x);

    ivec2 loadTexel = groupBase + localID;
    sharedVariance[localID.x][localID.y] = imageLoad(colorimg3, loadTexel).a;

    for (uint stage = 1u; stage < stageNum; ++stage) {
        localIndex = gl_LocalInvocationIndex + stage * groupArea;

        if (localIndex < sharedArea) {
            localID = ivec2(localIndex % sharedSize.x, localIndex / sharedSize.x);

            loadTexel = groupBase + localID;
        	sharedVariance[localID.x][localID.y] = imageLoad(colorimg3, loadTexel).a;
        }
    }

    memoryBarrierShared();
    barrier();
}

float CalculateVariance(in ivec2 texel) {
    // const float kernel[2] = float[2](1.0, 0.3);
	const float kernel[2][2] = {{0.25, 0.125}, {0.125, 0.0625}};

	float variance = 0.0;
	for (int x = -1; x <= 1; ++x) {
		for (int y = -1; y <= 1; ++y) {
			ivec2 varianceTexel = texel + ivec2(x, y);
			float weight = kernel[abs(x)][abs(y)];

			variance += sharedVariance[varianceTexel.x][varianceTexel.y] * weight;
		}
	}

	return variance;
}

//======// Main //================================================================================//
void main() {
	SharedPreload();

	ivec2 texel = ivec2(gl_GlobalInvocationID.xy);

	ivec2 offsetToBR = ivec2(halfViewSize.x, 0);
	ivec2 texelEnd = ivec2(halfViewEnd) - 1;

	vec4 normalDepthData = texelFetch(colortex2, texel + offsetToBR, 0);
	// vec2 depthGradient = vec2(dFdx(normalDepthData.w), dFdy(normalDepthData.w));

	const ivec2 offset[8] = {
		ivec2(-1, -1), ivec2(0, -1), ivec2(1, -1),
		ivec2(-1,  0), 				 ivec2(1,  0),
		ivec2(-1,  1), ivec2(0,  1), ivec2(1,  1)
	};

	// 0.0625 0.125 0.0625
	// 0.125  0.25  0.125
	// 0.0625 0.125 0.0625
	// 3×3 kernel used multiple times in the algorithm

	const float kernel[8] = {0.0625, 0.125, 0.0625, 0.125, 0.125, 0.0625, 0.125, 0.0625};

	// 1/16 1/4 1/16
	// 1/4  3/8  1/4
	// 1/16 1/4 1/16
	// const float h[8] = {1.0 / 16.0, 1.0 / 4.0, 1.0 / 16.0, 1.0 / 4.0, 1.0 / 4.0, 1.0 / 16.0, 1.0 / 4.0, 1.0 / 16.0};

	// 5x5 A-Trous kernel
	// const float h[25] = {1.0 / 256.0, 1.0 / 64.0, 3.0 / 128.0, 1.0 / 64.0, 1.0 / 256.0,
	//             1.0 / 64.0, 1.0 / 16.0, 3.0 / 32.0, 1.0 / 16.0, 1.0 / 64.0,
	//             3.0 / 128.0, 3.0 / 32.0, 9.0 / 64.0, 3.0 / 32.0, 3.0 / 128.0,
	//             1.0 / 64.0, 1.0 / 16.0, 3.0 / 32.0, 1.0 / 16.0, 1.0 / 64.0,
	//             1.0 / 256.0, 1.0 / 64.0, 3.0 / 128.0, 1.0 / 64.0, 1.0 / 256.0};


	vec4 filteredColVar = imageLoad(colorimg3, texel);
	float centerLuma = luminance(filteredColVar.rgb);

	float frameIndex = texelFetch(colortex2, texel, 0).a;
	float frameCurve = curve(saturate(frameIndex * 0.125));

	float variance = CalculateVariance(ivec2(gl_LocalInvocationID.xy + padRadius));
	const float invSigmaL = 4.0 * float(ATROUS_FILTER_SIZE);
	float variancePhi = -invSigmaL * inversesqrt(variance + EPS);
	variancePhi *= frameCurve;

	const float sigmaZ = -rLOG2 * inversesqrt(float(ATROUS_FILTER_SIZE));
	const float sigmaN = 48.0;

	float sumWeight = 1.0;
	ivec2 randTexel = texel + ivec2((R2(BlueNoiseTemporal(texel)) - 0.5) * float(ATROUS_FILTER_SIZE));

	for (uint i = 0u; i < 8u; ++i) {
		ivec2 sampleTexel = clamp(randTexel + offset[i] * ATROUS_FILTER_SIZE, ivec2(1), texelEnd);
		vec4 sampleData = texelFetch(colortex2, sampleTexel + offsetToBR, 0);

		vec4 sampleColVar = imageLoad(colorimg3, sampleTexel);
		float sampleLuma = luminance(sampleColVar.rgb);

		#if 0
			float weight = kernel[i];

			// wN = max(0, N0 · N1) ^ σN
			weight *= pow32(max0(dot(sampleData.xyz, normalDepthData.xyz)));

			// wD = exp(−|D0 − D1| / (|σD(grad · off)| + ε))
			// weight *= fastExp(-abs(sampleData.w - normalDepthData.w) / (abs(1.0 * dot(depthGradient, offset)) + 1e-6));
			weight *= exp2(abs(sampleData.w - normalDepthData.w) * sigmaZ);

			// wL = exp(−|L0 − L1| / (σLvar + ε))
			weight *= exp2(abs(sampleLuma - centerLuma) * variancePhi);
		#else
			float logWeightZ = abs(sampleData.w - normalDepthData.w) * sigmaZ;
			float logWeightL = abs(sampleLuma - centerLuma) * variancePhi;
			float logWeightN = log2(saturate(dot(sampleData.xyz, normalDepthData.xyz))) * sigmaN;

			float weight = exp2(logWeightN + logWeightZ + logWeightL);
		#endif

		sampleColVar.a *= weight; // Variance weighting
		filteredColVar += sampleColVar * weight;
		sumWeight += weight;
	}

	sumWeight = rcp(sumWeight);
	filteredColVar *= sumWeight;
	filteredColVar.a *= sumWeight; // Variance weighting
	imageStore(colorimg3, texel, filteredColVar);
}