/*
--------------------------------------------------------------------------------

	Revelation Shaders

	Copyright (C) 2024 HaringPro
	Apache License 2.0

	Pass: Compute indirect lighting (using Screen-Space Path Tracing)

--------------------------------------------------------------------------------
*/

const vec2 workGroupsRender = vec2(0.5f, 0.5f);

layout (local_size_x = 8, local_size_y = 8) in;

//======// Utility //=============================================================================//

#include "/lib/Utility.glsl"

//======// Output //==============================================================================//

restrict writeonly uniform image2D colorimg2;

//======// Uniform //=============================================================================//

#include "/lib/utility/Uniform.glsl"

//======// Function //============================================================================//

#include "/lib/utility/Transform.glsl"
#include "/lib/utility/Fetch.glsl"
#include "/lib/utility/Noise.glsl"

#include "/lib/atmospherics/Global.inc"

#include "/lib/surface/BRDF.glsl"

#include "/lib/lighting/GlobalIllumination.glsl"

//======// Main //================================================================================//
void main() {
	ivec2 screenTexel = ivec2(gl_GlobalInvocationID.xy);

    ivec2 currentTexel = screenTexel * 2;
	float depth = sampleDepth(currentTexel);

	if (depth < 1.0) {
		vec4 gbufferData0 = sampleGbufferData0(currentTexel);
		vec3 worldNormal = GetWorldNormal(gbufferData0);

		vec2 screenCoord = vec2(gl_GlobalInvocationID.xy) * viewPixelSize;
		vec3 screenPos = vec3(screenCoord * 2.0, depth);
		vec3 viewPos = ScreenToViewSpace(screenPos);

		vec2 lightmap = unpackUnorm2x8(gbufferData0.x);

		imageStore(colorimg2, screenTexel, vec4(CalculateSSPT(screenPos, viewPos, worldNormal, lightmap, BlueNoiseTemporal(currentTexel)), 1.0));
	}
}