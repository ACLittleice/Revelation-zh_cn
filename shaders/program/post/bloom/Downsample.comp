/*
--------------------------------------------------------------------------------

	Revelation Shaders

	Copyright (C) 2024 HaringPro
	Apache License 2.0

	Pass: Downsample bloom tiles

--------------------------------------------------------------------------------
*/

layout (local_size_x = 8, local_size_y = 8) in;

//======// Output //==============================================================================//

layout (r11f_g11f_b10f) restrict uniform image2D colorimg4;

//======// Utility //=============================================================================//

#include "/lib/Utility.glsl"

#define BLOOM_BLUR_SAMPLES 1 // [1 2 3 4 5 6 7 8]

//======// Uniform //=============================================================================//

#if DOWNSAMPLE_LEVEL == 0
	uniform sampler2D colortex1; // TAA image output
#else
	uniform sampler2D colortex4; // Bloom tile input
#endif

uniform vec2 viewSize;
uniform vec2 viewPixelSize;

//======// Function //============================================================================//

#if DOWNSAMPLE_LEVEL == 0
	vec3 karisAverage(in vec3 image) {
		return image / (1.0 + 1e-4 * GetLuminance(image));
	}

	#define CalculateTileOffset(lod) vec2(0.0)
	#define sampleTile(uv) karisAverage(textureLod(colortex1, uv, 0.0).rgb)
#else
    vec2 CalculateTileOffset(in const int lod) {
        const vec2 lodMult = floor(lod * 0.5 + vec2(0.0, 0.5));
        const vec2 offset = vec2(1.0 / 3.0, 2.0 / 3.0) * (1.0 - exp2(-2.0 * lodMult));

        return lodMult * 16.0 * viewPixelSize + offset;
    }

	#define sampleTile(uv) textureLod(colortex4, uv, 0.0).rgb
#endif

vec3 CalculateBloomTile(in vec2 uv) {
	vec3  bloomTile = vec3(0.0);
	float sumWeight = 1e-6;

	for (int y = -BLOOM_BLUR_SAMPLES; y <= BLOOM_BLUR_SAMPLES; ++y) {
		for (int x = -BLOOM_BLUR_SAMPLES; x <= BLOOM_BLUR_SAMPLES; ++x) {
			float weight = exp2(-dotSelf(vec2(x, y)) * 0.25);

			bloomTile += sampleTile(uv + vec2(x, y) * viewPixelSize) * weight;
			sumWeight += weight;
		}
	}

	return bloomTile * rcp(sumWeight);
}

//======// Main //================================================================================//
void main() {
    vec2 interpolatedUV = vec2(gl_GlobalInvocationID.xy) * 2.0 + 1.0;

    vec2 srcUV = interpolatedUV * viewPixelSize + CalculateTileOffset(DOWNSAMPLE_LEVEL - 1);

	if (clamp(srcUV, viewPixelSize, 1.0 - viewPixelSize) == srcUV) {
		vec3 bloomTile = CalculateBloomTile(srcUV);

		vec2 dstTexel = vec2(gl_GlobalInvocationID.xy) + CalculateTileOffset(DOWNSAMPLE_LEVEL) * viewSize;
		imageStore(colorimg4, ivec2(dstTexel), vec4(bloomTile, 1.0));
	}
}