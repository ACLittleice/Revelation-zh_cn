/*
--------------------------------------------------------------------------------

	Revelation Shaders

	Copyright (C) 2024 HaringPro
	Apache License 2.0

    Pass: Reproject scene history and lighting data history (half-res)

--------------------------------------------------------------------------------
*/

layout (local_size_x = 16, local_size_y = 16) in;
const vec2 workGroupsRender = vec2(0.5f, 0.5f);

//======// Utility //=============================================================================//

#include "/lib/Utility.glsl"

//======// Output //==============================================================================//

writeonly restrict uniform image2D colorimg4;
#ifdef SSPT_ENABLED
    writeonly restrict uniform image2D colorimg3;
#endif

//======// Uniform //=============================================================================//

uniform sampler2D depthtex0;

uniform sampler2D colortex1; // Scene history
uniform sampler2D colortex3; // Lighting data history

uniform mat4 gbufferModelView;
uniform mat4 gbufferModelViewInverse;
uniform mat4 gbufferProjection;
uniform mat4 gbufferProjectionInverse;

uniform mat4 gbufferPreviousModelView;
uniform mat4 gbufferPreviousProjection;

uniform float near;
uniform float far;

uniform vec3 cameraPosition;
uniform vec3 previousCameraPosition;

uniform vec2 viewSize;
uniform vec2 viewPixelSize;
uniform vec2 taaOffset;

//======// Function //============================================================================//

#include "/lib/utility/Transform.glsl"

//======// Main //================================================================================//
void main() {
    ivec2 screenTexel = ivec2(gl_GlobalInvocationID.xy);

	float depth = texelFetch(depthtex0, screenTexel * 2, 0).x;

	vec2 screenCoord = vec2(gl_GlobalInvocationID.xy) * viewPixelSize;
    vec2 previousCoord = Reproject(vec3(screenCoord * 2.0, depth)).xy;

    if (saturate(previousCoord) == previousCoord && depth > 0.56) {
        vec3 reprojectedHistory = texture(colortex1, previousCoord).rgb;
        imageStore(colorimg4, screenTexel, vec4(reprojectedHistory, 1.0));
        #ifdef SSPT_ENABLED
            reprojectedHistory = texture(colortex3, previousCoord).rgb;
            imageStore(colorimg3, screenTexel, vec4(reprojectedHistory, 1.0));
        } else {
            imageStore(colorimg3, screenTexel, vec4(0.0));
        #endif
    }
}